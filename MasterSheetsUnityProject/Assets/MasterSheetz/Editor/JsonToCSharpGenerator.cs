using System;
using System.Text;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using MasterData.Editor;
using UnityEngine;
using UnityEditor;

namespace App.MasterData.AutoGenerated
{
    internal static class JsonToCSharpGenerator
    {
        [MenuItem("Development Tools/MasterData/Generate MasterData C# Classes", false, 200)]
        public static void GenerateMasterDataClasses()
        {
            var asset = MasterDataConfigAssetCreator.GetAsset<CSharpGenerateConfigAsset>();
            if (asset == null)
            {
                ShowErrorDialog("Error", "CSharpGenerateConfigAsset not found.");
                return;
            }

            var jsonFolderPath = asset.JsonFolderPath;
            var outputFolderPath = asset.OutputFolderPath;
            var error = false;
            try
            {
                EnsureOutputDirectoryExists(outputFolderPath);
                CleanOutputDirectory(outputFolderPath); // 既存のC#ファイルを削除

                var jsonFiles = GetJsonFiles(jsonFolderPath);
                var totalFiles = jsonFiles.Length;
                var processedFiles = 0;

                foreach (var jsonFilePath in jsonFiles)
                {
                    // 進捗率を計算
                    var progress = (float)processedFiles / totalFiles;

                    // プログレスバーを更新
                    EditorUtility.DisplayProgressBar(
                        "Processing JSON Files", // ウィンドウタイトル
                        $"Processing file {processedFiles + 1} of {totalFiles}: {jsonFilePath}", // 説明
                        progress // 進捗率 (0.0 - 1.0)
                    );

                    // JSONファイルを処理
                    ProcessJsonFile(jsonFilePath, outputFolderPath, asset.AutoGeneratedNameSpace);
                    processedFiles++;
                }
            }
            catch (Exception ex)
            {
                error = true;
                ShowErrorDialog("Error", $"An error occurred: {ex.Message}");
            }
            finally
            {
                EditorUtility.ClearProgressBar();
                AssetDatabase.Refresh();
                
                if (error)
                {
                    EditorUtility.DisplayDialog("Error", "C# class generation failed.", "OK");    
                }
                else
                {
                    EditorUtility.DisplayDialog("Success", "C# classes generated successfully.", "OK");    
                }
            }
        }

        private static void EnsureOutputDirectoryExists(string outputFolderPath)
        {
            if (string.IsNullOrEmpty(outputFolderPath))
            {
                throw new ArgumentException("Output folder path is not set.");
            }

            if (!Directory.Exists(outputFolderPath))
            {
                Directory.CreateDirectory(outputFolderPath);
            }
        }

        private static void CleanOutputDirectory(string outputFolderPath)
        {
            var csFiles = Directory.GetFiles(outputFolderPath, "*.cs");
            foreach (var file in csFiles)
            {
                File.Delete(file);
            }
        }

        private static string[] GetJsonFiles(string folderPath)
        {
            if (!Directory.Exists(folderPath))
            {
                throw new DirectoryNotFoundException($"The specified folder does not exist: {folderPath}");
            }

            return Directory.GetFiles(folderPath, "*.json");
        }

        private static void ProcessJsonFile(string jsonFilePath, string outputFolderPath, string nameSpace)
        {
            var jsonContent = File.ReadAllText(jsonFilePath);
            var jsonRoot = JsonUtility.FromJson<RootJson>(jsonContent);

            if (!IsValidJsonRoot(jsonRoot))
            {
                throw new Exception("Invalid JSON format. Please check the JSON structure.");
            }

            var generatedClass =
                GenerateCSharpClass(jsonRoot.className, jsonRoot.columns, jsonRoot.types, nameSpace);
            WriteGeneratedClassToFile(generatedClass, jsonRoot.className, outputFolderPath);
        }

        private static bool IsValidJsonRoot(RootJson jsonRoot)
        {
            return jsonRoot != null && jsonRoot.className != null && jsonRoot.types != null && jsonRoot.columns != null;
        }

        private static void WriteGeneratedClassToFile(string generatedClass, string className, string outputFolderPath)
        {
            var outputFileName = Path.Combine(outputFolderPath, $"{className}MasterDataTable.cs");
            File.WriteAllText(outputFileName, generatedClass, new UTF8Encoding(false));
        }

        private static string GenerateCSharpClass(string className, List<string> columns, List<string> types,
            string nameSpace)
        {
            if (columns.Count != types.Count)
            {
                throw new ArgumentException("The number of column names and type information does not match.");
            }

            if (string.IsNullOrEmpty(nameSpace))
            {
                nameSpace = "MasterData.AutoGenerated";
            }
            
            var masterDataClassName = className + "Data";
            var masterDataTableClassName = className + "MasterDataTable";

            var classDef = new StringBuilder();
            classDef.AppendLine("using System;");
            classDef.AppendLine("using System.Collections.Generic;");
            classDef.AppendLine("using UnityEngine;");
            classDef.AppendLine("using MasterSheetz.Runtime;");
            classDef.AppendLine();
            classDef.AppendLine($"namespace {nameSpace}");
            classDef.AppendLine("{");
            classDef.AppendLine("    [Serializable]");
            classDef.AppendLine($"    public class {masterDataClassName} : IMasterData");
            classDef.AppendLine("    {");

            // プライベートフィールド
            for (var i = 0; i < columns.Count; i++)
            {
                var csharpType = ConvertJsonTypeToCSharp(types[i]);
                classDef.AppendLine($"        [SerializeField] private {csharpType} {columns[i]};");
            }

            classDef.AppendLine();

            // プロパティ (ゲッター)
            for (var i = 0; i < columns.Count; i++)
            {
                var csharpType = ConvertJsonTypeToCSharp(types[i]);
                classDef.AppendLine(
                    $"        public {csharpType} {char.ToUpper(columns[i][0], CultureInfo.InvariantCulture) + columns[i].Substring(1)} => {columns[i]};"
                );
            }

            classDef.AppendLine("    }");
            classDef.AppendLine();

            // MasterDataTable クラス定義
            classDef.AppendLine($"    public partial class {masterDataTableClassName} : MasterDataTable<{masterDataClassName}>");
            classDef.AppendLine("    {");
            classDef.AppendLine(
                $"        public {masterDataTableClassName}(IEnumerable<{masterDataClassName}> masterData) : base(masterData) {{ }}"
            );
            classDef.AppendLine("    }");
            classDef.AppendLine("}");

            return classDef.ToString();
        }

        private static string ConvertJsonTypeToCSharp(string jsonType)
        {
            return jsonType switch
            {
                "string" => "string",
                "int" => "int",
                "bool" => "bool",
                _ => throw new NotSupportedException($"{jsonType} is not a supported type.")
            };
        }

        private static void ShowErrorDialog(string title, string message)
        {
            EditorUtility.DisplayDialog(title, message, "OK");
        }
    }

    [Serializable]
    internal class RootJson
    {
        public string className;
        public List<string> types; // カラムの型情報リスト
        public List<string> columns; // カラム名リスト
    }
}